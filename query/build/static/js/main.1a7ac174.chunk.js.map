{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","rows","setRows","id","setId","className","onSubmit","event","preventDefault","url","axios","get","then","result","data","rrows","tempcell","push","i","length","cell","d","Date","created_at","s","getDate","getMonth","getFullYear","getHours","getMinutes","getSeconds","complaint1","complaint2","complaint3","explanation1","explanation2","explanation3","catch","err","console","log","name","onChange","target","value","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPA0EeA,MAtEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAGOF,mBAAS,GAHhB,mBAGNG,EAHM,KAGFC,EAHE,KA+Cb,OACE,sBAAKC,UAAU,UAAf,UACE,iEACA,uBAAMC,SA7CW,SAAAC,GACnBA,EAAMC,iBACN,IAAIC,EAAG,gBAAYN,GACnBO,IAAMC,IAAIF,GACPG,MAAK,SAAAC,GACJ,IAAIC,EAAOD,EAAOC,KACdC,EAAQ,GACRC,EAAW,GACfA,EAASC,KAAK,uCACdD,EAASC,KAAK,6CACdD,EAASC,KAAK,6CACdD,EAASC,KAAK,6CACdD,EAASC,KAAK,gDACdD,EAASC,KAAK,gDACdD,EAASC,KAAK,gDACdF,EAAME,KAAK,6BAAMD,KACjB,IAAK,IAAIE,EAAI,EAAGA,EAAIJ,EAAKK,SAAUD,EAAG,CACpC,IAAIE,EAAO,GACPC,EAAI,IAAIC,KAAKR,EAAKI,GAAGK,YACrBC,EAAC,UAAMH,EAAEI,UAAR,YAAqBJ,EAAEK,WAAW,EAAlC,YAAuCL,EAAEM,cAAzC,YAA0DN,EAAEO,WAA5D,YAA0EP,EAAEQ,aAA5E,YAA4FR,EAAES,cACnGV,EAAKH,KAAK,6BAAMO,KAChBJ,EAAKH,KAAK,6BAAMH,EAAKI,GAAGa,cACxBX,EAAKH,KAAK,6BAAMH,EAAKI,GAAGc,cACxBZ,EAAKH,KAAK,6BAAMH,EAAKI,GAAGe,cACxBb,EAAKH,KAAK,6BAAMH,EAAKI,GAAGgB,gBACxBd,EAAKH,KAAK,6BAAMH,EAAKI,GAAGiB,gBACxBf,EAAKH,KAAK,6BAAMH,EAAKI,GAAGkB,gBACxBrB,EAAME,KAAK,6BAAMG,KAEnBlB,EAAQa,MACPH,MAAK,SAAAC,GACNT,EAAM,MAEPiC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OAWd,UACE,mCACE,kCACE,4CACA,uBAAOG,KAAK,KAAKC,SAXN,SAAAnC,GACnBH,EAAMG,EAAMoC,OAAOC,eAaf,wBAAQC,KAAK,SAAb,uBAEF,sBAAKxC,UAAU,SAAf,UACA,+CACA,uBAAOA,UAAU,WAAjB,SACIJ,WCtDK6C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1a7ac174.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n  const [rows, setRows] = useState([]);\n\n  const [id, setId] = useState(0);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    let url = `comps/${id}`;\n    axios.get(url)\n      .then(result => {\n        let data = result.data;\n        let rrows = [];\n        let tempcell = [];\n        tempcell.push(<th>Date</th>);\n        tempcell.push(<th>Complain 1</th>);\n        tempcell.push(<th>Complain 2</th>);\n        tempcell.push(<th>Complain 3</th>);\n        tempcell.push(<th>Explanation 1</th>);\n        tempcell.push(<th>Explanation 2</th>);\n        tempcell.push(<th>Explanation 3</th>);\n        rrows.push(<tr>{ tempcell }</tr>);\n        for (let i = 0; i < data.length; ++i) {\n          let cell = [];\n          let d = new Date(data[i].created_at);\n          let s = `${d.getDate()}-${d.getMonth()+1}-${d.getFullYear()} ${d.getHours()}:${d.getMinutes()}:${d.getSeconds()}`;\n          cell.push(<td>{ s }</td>);\n          cell.push(<td>{ data[i].complaint1 }</td>);\n          cell.push(<td>{ data[i].complaint2 }</td>);\n          cell.push(<td>{ data[i].complaint3 }</td>);\n          cell.push(<td>{ data[i].explanation1 }</td>);\n          cell.push(<td>{ data[i].explanation2 }</td>);\n          cell.push(<td>{ data[i].explanation3 }</td>);\n          rrows.push(<tr>{ cell }</tr>);\n        }\n        setRows(rrows);\n      }).then(result=> {\n        setId(0);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  const handleChange = event => {\n    setId(event.target.value);\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <h1>Query Patient Recent Complaints</h1>\n      <form onSubmit={handleSubmit}>\n        <fieldset>\n          <label>\n            <p>Patient ID:</p>\n            <input name=\"id\" onChange={handleChange} />\n          </label>\n        </fieldset>\n        <button type=\"submit\">Submit</button>\n      </form>\n      <div className=\"result\">\n      <h2>Query Results</h2>\n      <table className=\"tabletag\">\n        { rows }\n      </table>\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}